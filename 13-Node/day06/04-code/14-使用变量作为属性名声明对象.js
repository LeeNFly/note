var key = "na______me";
// 在ES6之前, 创建对象时, 对象的属性名是不识别变量的, 在ES6之后, 在创建对象时, 可以让属性名识别变量
// 如何以变量的值作为属性名
// key="name"  就想让对象的属性名是name

var obj = {
    [key]: "王春生"
}
// 相当于[]语法   obj[key] = "王春生"
// 识别变量key, 将变量key的值作为对象中的属性名, 访问规则遵循词法作用域

console.log(obj); // { na______me: "王春生" }

// 拓展
// 对象属性名[]内除了可以是变量, 还是可以是表达式或函数的调用等 (变量的访问规则遵循词法作用域) , 会将表达式执行的最终结果 / 函数调用的返回值 作为对象中的属性名
// 如果返回的属性名不符合变量名的命名规范, 则会使用字符串作为对象的属性名

let key = 'zs' // 符合变量命名规范
const fn = _ => 'abc-a21~' // 不符合变量命名规范

let obj2 = {
    [key]: 'zs',
    [fn()]: 14
}

console.log(obj2) // { zs: 'zs', 'abc-a21~': 14 } 也是一个对象
console.log(typeof obj2) // object

// 说明:

// 在es6中, 对象的属性名可以是字符串  { name: 'zs', 'abc-a21~': 14 }, 如'abc-a21~'
// 对于符合变量命名规则方式的属性名, 可以继续不加引号也可以加引号, 对于不符合变量命名规范的属性名, 必须要加引号
// 在设置和获取属性值的时候, 对于符合变量命名规范的属性(不管属性名有没有加引号), 都可以使用.语法和[]语法; 对于不符合变量命名方式的属性, 只能使用[]语法
